spring:
  profiles:
    active: local
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_ADDRESS}
    password: ${GMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  security:
    oauth2:
      client:
        registration:
          google:
            authorization-grant-type: authorization_code
            client-name: Google
            scope:
              - email
              - profile
          kakao:
            authorization-grant-type: authorization_code
            client-name: Kakao
            scope:
              - profile_nickname
              - account_email
              - profile_image
            client-authentication-method: POST
          naver:
            authorization-grant-type: authorization_code
            client-name: Naver
            scope:
              - email
              - profile
            client-authentication-method: POST
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

        pathmatch:
          matching-strategy: ant_path_matcher

cloud:
  aws:
    s3:
      bucket: bit-harbor.net
    region:
      auto: false
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      use-default-aws-credentials-chain: true

aws:
  paramstore:
    enabled: true
    prefix: /spring-boot-aws/bit-harbor
    defaultContext: ${spring.profiles.active}
    profileSeparator: _

server:
  servlet:
    encoding:
      force-response: true

---


spring:
  config:
    import: "aws-parameterstore:"
    activate:
      on-profile: dev
  datasource:
    url:
    username:
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        show_sql: false
        format_sql: false
  servlet:
    multipart:
      max-file-size: 10MB
  security:
    oauth2:
      client:
        registration:
          google:
            clientId:
            clientSecret:
            redirect-uri:
          kakao:
            clientId:
            clientSecret:
            redirect-uri:
          naver:
            clientId:
            clientSecret:
            redirect-uri:

jwt:
  secretKey:
  access:
    expiration: 360000
    header: Authorization
  refresh:
    expiration: 120960000
    header: Authorization-refresh

mail:
  address:
    admin: admin@gmail.com


#config:
#  domain :

---

spring:
  config:
    import: "aws-parameterstore:"
    activate:
      on-profile: local
  datasource:
    url:
    username:
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  servlet:
    multipart:
      max-file-size: 10MB
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret: {GOOGLE_CLIENT_SECRET}
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
          kakao:
            clientId: ${KAKAO_CLIENT_ID}
            clientSecret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
          naver:
            clientId: ${NAVER_CLIENT_ID}
            clientSecret: ${NAVER_SECRET_KEY}
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'

aws:
  accessKeyId:
  secretKey:

jwt:
  secretKey: ${JWT_SECRET_KEY}
  access:
    expiration: 360000
    header: Authorization
  refresh:
    expiration: 120960000
    header: Authorization-refresh

mail:
  address:
    admin: admin@gmail.com

#config:
#  domain :

logging:
  level:
    Bitharbor_server: DEBUG
    org:
      springframework:
        orm:
          jpa: DEBUG
---
